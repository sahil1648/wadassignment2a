import random
import math
import heapq

def generate_random_board(n):
    return [random.randint(0, n - 1) for _ in range(n)]

def heuristic(board):
    attacks = 0
    n = len(board)
    for i in range(n):
        for j in range(i + 1, n):
            if board[i] == board[j] or abs(board[i] - board[j]) == j - i:
                attacks += 1
    return attacks

def hill_climbing(n):
    current_board = generate_random_board(n)
    while True:
        h = heuristic(current_board)
        if h == 0:
            return current_board
        next_board = current_board[:]
        for i in range(n):
            for j in range(n):
                if j != current_board[i]:
                    next_board[i] = j
                    if heuristic(next_board) < h:
                        h = heuristic(next_board)
                        current_board = next_board[:]
                        break
        else:
            return current_board

def simulated_annealing(n, max_iter=10000):
    current_board = generate_random_board(n)
    current_h = heuristic(current_board)
    temperature = 1.0
    cooling_rate = 0.003
    for _ in range(max_iter):
        if current_h == 0:
            return current_board
        next_board = current_board[:]
        i, j = random.randint(0, n - 1), random.randint(0, n - 1)
        next_board[i] = j
        next_h = heuristic(next_board)
        delta_h = next_h - current_h
        if delta_h < 0 or random.random() < math.exp(-delta_h / temperature):
            current_board, current_h = next_board[:], next_h
        temperature *= 1 - cooling_rate
    return current_board

def successors(board):
    n = len(board)
    for i in range(n):
        for j in range(n):
            if j != board[i]:
                yield board[:i] + [j] + board[i + 1:]

def astar(n):
    start_state = generate_random_board(n)
    heap = [(heuristic(start_state), start_state)]
    visited = set()
    while heap:
        _, current_board = heapq.heappop(heap)
        if heuristic(current_board) == 0:
            return current_board
        visited.add(tuple(current_board))
        for next_board in successors(current_board):
            if tuple(next_board) not in visited:
                heapq.heappush(heap, (heuristic(next_board), next_board))

# Hill Climbing
n = 8
solution_hill_climbing = hill_climbing(n)
print("Solution using Hill Climbing:", solution_hill_climbing)

# Simulated Annealing
n = 8
solution_simulated_annealing = simulated_annealing(n)
print("Solution using Simulated Annealing:", solution_simulated_annealing)

# A* Algorithm
n = 8
solution_astar = astar(n)
print("Solution using A* Algorithm:", solution_astar)
